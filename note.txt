server Creation
---------------

1. create package.json file  -npm init
2. install express framework  -npm i express


server side technology - node -resolves multiple requests at a time

api
---
http request

header        body
secret data  data-json/xml

types
-----
GET -read
POST -create
PUT -complete updation
PATCH -partial updation
DELETE-remove

server response status code
---------------------------
100 - information
200 - success
300 - redierection
400 - client side error
500 - server side error



server Creation steps
---------------------

1. import express
2. create app using express
3. port number setting-3000
4. resolve http requests

Nodemon
-------

if we run server using node, recompilation not work
so we use another server 

-npm i -g nodemon


express.json()  -to convert all request datas from json to javascript
.json(data)      -to convert(js to json) and send the data as response
.status(statuscode) - change the response status code as statuscode

TOKEN IN server
---------------

JWT TOKEN -json web TOKEN
install
        -npn i jsonwebtoken
library   -jsonwebtoken
sign()    -method used to generate JWT token
verify()  -used to verify json web token

token verification
------------------

token verification can do middlewares
middlewares have the capacity to control server requests

-middleware is a function with 3 arguments - request,response,next

1.application specific middleware
    -work before all requests in server
2.Router specific middleware
    -can apply to specific request

How to solve runtime errors in js
---------------------------------

try except 

try
    error causing code

catch
    error solve


MONGO DB  -databse 
-------------
install mongodb server



shell commands
--------------
CRUD

-show dbs                    -to see databases
-use (database_name)         -to open a database
-show collections            -to see collections inside db
-db.(collection_name).find() -to read all data in collection
-db.(collection_name).findOne({acno:1000}) - to read single data
-db.(collection_name).insertOne({"acno":1001,"name":"amal",....}) -create new data
-db.(collection_name).find({balance:gt:4000})- find using a condition
-db.(collection_name).deleteOne({acno:1000}) -delete count used to delete
-db.(collection_name).updateOne({uname:anu},{$set:{uname:anu v}})

register-insertOne
login- findOne
deposit-updateOne
withdraw--updateOne
transaction history-findOne
delete-deleteOne

server database integration
--------------------------

database-27017
server-3000

mongoose -used to server mdb integration

install -npm i mongoose
steps
-----

1.import mongoose
2.state a coonection string to integrate
3.define a model for our collection 